// * 12.0 (закомментировано, чтобы не было конфликтов с записями след. урока в [03-classes\15-extend-classes.ts]) "Классы" безусловно базовая составляющая хорошего ООП. Возьмём пример из прошлых уроков и перепишем его как класс.

/* enum productSize {
  small,
  medium = 'medium',
  large = 'large',
} */

// 12.1 Как и в обычном JavaScript в TypeScript мы создаём класс с ключевого слова "class", за ним следует название класса и фигурные скобки. Но теперь мы можем улучшить класс с помощью TS-синтаксиса, объявив типы данных для его свойств. Однако мы не можем гарантировать, что свойства будут существовать в правильном типе данных, когда мы используем класс и у нас есть несколько опций, чтобы обойти это затруднение: 1) мы можем записать, что свойство "size" опционально (это всё равно, что написать, что оно может быть типом "productSize" или "undefined"); 2) присвоить свойству значение по умолчанию, например, скажем, что если не указано что-то другое, то все продукты будут серого цвета.
// 12.2 Но ни одно из этих опций не подходит для свойств "name" & "price", т.к. они всегда должны быть указаны при использовании этого класса. Т.ч. мы возьмём их в constructor и сразу же указать соответствующим образом. Теперь TS будет спокоен и наши свойства класса предсказуемы.
// 12.3 Конечно, мы можем предопределить и методы для нашего класса. Создадим фейковый метод "buy" и пофантазируем, что console.log() превращается в какой-то кусок кода для оплаты нашего продукта. Т.к. этот метод ничего не возвращает, то определим тип данных для его результата "void". Однако, если мы захотим сделать метод подходящим для использования цепочкой, то мы можем возвращать "this", и тогда тип возвращаемых данных будет также "this".

/* class someProduct {
  name: string;
  price: number;
  color: string = 'gray';
  size?: productSize;

  constructor(name: string, price: number) {
    this.name = name;
    this.price = price;
  }

  // buy(): void {
  //   console.log(this.price);
  // }
  buy(): this {
    console.log(this.price);
    return this;
  }
} */

// 12.4 И, наконец, мы используем наш класс для создания какого-то продукта, например T-Shirt. И, пока мы не укажем ему название и цену, TS будет ругаться.

// const someTShirt = new someProduct('T-Shirt Anime Design', 12);

// 12.5 Также укажем футболке цвет и размер.
/* someTShirt.size = productSize.medium;
someTShirt.color = 'white'; */

// 12.6 И вызовем метод "buy", чтобы «купить» футболку.
// someTShirt.buy(); // в консоль попадёт цена футболки 12
