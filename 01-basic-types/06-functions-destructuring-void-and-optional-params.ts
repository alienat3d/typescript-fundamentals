// * 4.0 Если мы хотим прибегнуть к деструктуризации, то в TS мы также можем сделать это, но синтаксис чуточку изменится. Он идёт в {} после указания деструктуризованых параметров.
function sum({ x, y }: { x: number; y: number }): number {
  return x + y;
}

console.log(sum({ x: 2, y: 5 }));

// ? 4.1 Иногда мы можем создать функцию, которая ничего не возвращает. Например функция "log", которая всего лишь сокращает "console.log()". И т.к. она ничего не возвращает, а лишь вызывает "console.log()", то тип возвращаемого результата будет "void", т.е. ничего. Это то, что мы используем, когда функция ничего не возвращает.
function log(value: any): void {
  console.log(value);
}

// ? 4.2 Также мы можем указывать опциональные параметры при помощи "?". Мы создадим функцию "greet", которая принимает опциональный параметр имя в качестве строки. И если имя попадает в эту функцию, то она поприветствует пользователя, используя предоставленное имя, иначе скажет "Hello stranger!".
function greet(name?: string) {
  if (name) {
    alert(`Hello there, ${name}!`);
  } else {
    alert('Hello, stranger!');
  }
}

greet('a smart TypeScript student!');
