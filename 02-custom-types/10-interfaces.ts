// * 8.0 Чтобы описать вид объекта используют interface и делается это следующим образом:
// 8.2 Однако, представим, что не все поля должны быть обязательны, только у некоторых объектов они могут быть, т.ч. сделаем их опциональными с помощью "?" после имени поля.

interface Developer {
  name: string;
  age: number;
  skills: string[];
  kidsAmount?: number;
}

// 8.1 По действию очень похоже на алиас типов, но есть некоторые различия. И, помимо синтаксиса, главное отличие interface от алиаса — мы можем добавлять новые поля в interface в любое время, просто объявив тот же interface и добавив в него новые поля.
// ? Хотя в действительности нам не нужно переопределять interface добавляя поля таким образом, а лучше было бы сразу добавить это поле в изначальный interface. Однако добавить поля к существующему interface может быть очень полезно, когда мы используем сторонние библиотеки и хотим расширить их interface.

/* interface Developer {
  skills: string[];
} */

const al: Developer = {
  name: 'Al',
  age: 38,
  skills: ['JavaScript', 'Vue', 'HTML', 'CSS', 'NPM', 'Gulp', 'Vite'],
};

const julia: Developer = {
  name: 'Julia',
  age: 37,
  skills: ['JavaScript', 'HTML', 'CSS', 'NPM', 'Gulp'],
  kidsAmount: 2,
};
